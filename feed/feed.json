{
  "version": "https://jsonfeed.org/version/1",
  "title": "Dmitrii&#39;s tech blog",
  "home_page_url": "https://dushkin.tech",
  "feed_url": "https://dushkin.tech/feed/feed.json",
  "description": "Software engineering and beyond",
  "author": {
    "name": "Dmitrii Dushkin",
    "url": ""
  },
  "items": [{
      "id": "https://dushkin.tech/posts/bun_and_deno_js_runtimes/",
      "url": "https://dushkin.tech/posts/bun_and_deno_js_runtimes/",
      "title": "Overview of new Javascript/Typescript runtimes: Bun and Deno",
      "content_html": "<p>While procrastinating on my pet project I finally tried “new age” JS/Typescript runtimes: Bun and Deno. Here is my short overview.</p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p><strong>Why might you want to consider using Bun or Deno?</strong> They both promise more streamlined development experience thanks to native TypeScript support, faster overall runtime and built-in collection of helpful tools like code linting, formatting, test runner, package manager, etc. Deno also provides unique security feature: permissions over disk, network, systems calls, and environment variables.</p>\n<p>Here is my personal experience on using both.</p>\n<h2 id=\"bun\">Bun <a class=\"direct-link\" href=\"#bun\">#</a></h2>\n<p><img src=\"/img/for_posts/bun_deno/bun.png\" alt=\"Bun logo\"><br>\nBun is fast thanks to Apple’s JS engine, JavaScriptCore. Bun also has far better compatibility with existing Node.JS ecosystem thanks to using standard <code>node_modules</code>, <code>package.json</code>, etc. Seems like a solid alternative to <code>ts-node</code> (if you want your Node.JS app on Typescript). It has small caveats (like missing full support for brotli compression), but overall the experience was smooth.</p>\n<p>Bun's HTTP(s) server module is based on extremely fast uWebSockets library <a href=\"https://github.com/uNetworking/uWebSockets/discussions/1466#discussioncomment-3114410\">1</a>, <a href=\"https://github.com/oven-sh/bun/tree/182b90896f67a8e4979b9c415e91a23ec337c281/packages/bun-uws\">2</a>.</p>\n<p>Worth to mention that there is <a href=\"https://elysiajs.com/\">Elysia</a> framework which is based on Bun. In a nutshell, it's web-server with a helpful capability of producing typed response, and types are shared between server and client. This capability is also called <em>&quot;end-to-end type safety&quot;</em>. It's similar to tRPC, but with Express.js-like API and faster by default thanks to Bun.</p>\n<h2 id=\"deno\">Deno <a class=\"direct-link\" href=\"#deno\">#</a></h2>\n<p><img src=\"/img/for_posts/bun_deno/deno.png\" alt=\"Deno logo\"></p>\n<p>Deno is slower in terms of raw performance (since it uses V8), but it provided a positive initial impression. Plain TypeScript code just worked!</p>\n<p>Until I tried to use Prisma with it. Prisma is a great ORM (abstraction layer for various databases), but it uses small hack over <code>node_modules</code> to make generated code to work seamlessly. That’s where Deno stopped working. It uses custom cache for downloaded packages (e.g. not using <code>node_modules</code>) and has no support for CommonJS exports (<code>require()</code> function) in app’s source code. Unless you use paid “cloud” Prisma service you won’t be able to use Deno.</p>\n<p>On Deno-focused libraries. It feels like Deno took its big shot 2 years ago, and since then, many 3rd party libraries have been abandoned. TBH I’m not sure that such distancing from Node.JS and npm will be a good service for Deno.</p>\n<p>On a positive side Deno can be used in Jupyter Notebooks! Which is perfect for prototyping things especially with LLM and 3rd party APIs.</p>\n<p>I also love Deno’s idea of limiting by default network, reading env variables and others. <strong>It’s a great foundation for privacy first applications</strong>. I think many apps with community plugins support (like my favorite note taking app, Obsidian) , would benefit greatly if somehow they could adapt this model (or Deno itself) for 3rd party extensions.</p>\n<h2 id=\"comparison-(on-april-2024)\">Comparison (on April 2024) <a class=\"direct-link\" href=\"#comparison-(on-april-2024)\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Bun</th>\n<th>Deno</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>HTTP server</strong> speed</td>\n<td>2-3x faster</td>\n<td>Slower</td>\n</tr>\n<tr>\n<td><strong>Sqlite3 speed</strong></td>\n<td>2.5x faster than Deno, almost 4x faster than Node.JS</td>\n<td>Slower</td>\n</tr>\n<tr>\n<td><strong>Multi-threading</strong></td>\n<td>Has <a href=\"https://bun.sh/docs/api/workers\">Web Workers API</a> support, but no memory sharing between threads</td>\n<td>Has <a href=\"https://docs.deno.com/runtime/manual/runtime/workers\">Web Workers API</a> support and shared memory</td>\n</tr>\n<tr>\n<td><strong>Node.JS like Cluster (more on that below</strong>)</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td><strong>Node.JS ecosystem</strong> compatibility</td>\n<td>Better</td>\n<td>Worse: own modules import syntax, no __dirname support, no CommonJS support, essentialy no <code>node_modules</code></td>\n</tr>\n<tr>\n<td><strong>Built-In Typescript support</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><strong>Tooling</strong></td>\n<td>Package manager (npm replacement), test runner, JS and CSS bundler</td>\n<td>Linter, formatter, built-in Typescript type checker, package manager, test runner</td>\n</tr>\n<tr>\n<td><strong>Security</strong></td>\n<td>Same as Node.JS</td>\n<td>Much better thanks to core mechanisms of limiting network, system calls, disk, environments reads and writes, etc.</td>\n</tr>\n<tr>\n<td><strong>Avarage RAM usage</strong></td>\n<td>Almost twice lower than Deno</td>\n<td>Similar to Node.JS</td>\n</tr>\n<tr>\n<td><strong>Ownership</strong></td>\n<td>Both venture capital backed (yes, there is always a risk projects development might be dropped)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Overall, judging from toolset Bun is more full-stack focused and Deno is more back-end focused.</p>\n<h2 id=\"on-performance\">On performance <a class=\"direct-link\" href=\"#on-performance\">#</a></h2>\n<p>A few words on real-life performance. To be honest, it's a big separate topic, but short summary might sound like this.</p>\n<p>First of all, <strong>not everyone needs to care about performance</strong>, especially on early stages of a product. Things like reliability, community support, compatibility with Node.JS ecosystem, developer experience (tooling) are much-much more important for the initial success of a product than raw performance. Still, if it's critical for your app to be as fast as possible, here is a short guide.</p>\n<p><strong>If your app is not that CPU-intensive</strong>, Bun is a good choice since it almost 6 times faster than Node.JS on a single instance (win depends on a case, but it's always faster). Deno is also fine, since it's 2-3 times faster than Node.JS.</p>\n<p><strong>If your app is CPU-intensive</strong>, the simplest way is to use Node.JS Cluster API which is a wrapper over creating isolated instances of the same app. It's memory heavy (since processes are isolated), but still gives a good performance boost. Both Deno and Bun doesn't have such API. It can be mitigated by using higher-level solutions like load balancers (for instance <a href=\"https://gobetween.io/index.html\">GoBetween</a>), but it's a fairly more complex solution.</p>\n<p><strong>If your app is CPU and memory intensive</strong> (e.g. you're working with large datasets) for all runtimes you can leverage Web Workers API which provides multi-threading capabilities. It will require manual separation of code chunks that should and can be executed in a separate threads, but it gives a much lower memory overhead since there is still one instance of a runtime. In this case Deno might be a better choice since it supports shared memory primitives (SharedArrayBuffer). However, Bun might be fine as well if don't need to share data between threads.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>Personally, I decided to go with Bun for my pet project since I use SQLite a lot, plan to add a front-end and I'm not ready spend additional time resolving Deno's incompatibilities with Node.js. However, I use occasionaly Deno in Jupyter Notebooks for prototyping with LLM and third-party APIs.</p>\n<h2 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h2>\n<ul>\n<li><a href=\"https://snyk.io/blog/javascript-runtime-compare-node-deno-bun/\">Nice comparison article between NodeJS, Bun and Deno</a></li>\n<li><a href=\"https://medium.com/deno-the-complete-reference/node-js-vs-deno-vs-bun-benchmark-for-a-real-world-case-jwt-postgres-pdf-gen-9fbd94bb9a83\">Another good comparison with memory usage stats</a></li>\n<li><a href=\"https://dev.hexagon.56k.guru/posts/deno-vs-bun-vs-node/\">Features table comparison</a></li>\n<li><a href=\"https://www.reddit.com/r/node/comments/13oqbvi/i_have_done_a_full_benchmark_of_a_post_rest_api/\">Benchmark of Bun, Deno, Node.JS and Go including cluster mode</a></li>\n</ul>\n",
      "date_published": "2024-04-05T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/stale_state_react/",
      "url": "https://dushkin.tech/posts/stale_state_react/",
      "title": "How to fix stale React useState&#39;s state in a callback",
      "content_html": "<h2 id=\"problem-statement\">Problem statement <a class=\"direct-link\" href=\"#problem-statement\">#</a></h2>\n<p>React components often use functions as prop values, known as &quot;callback functions&quot;, to handle events like clicks or modal state changes. However, issues arise with some component libraries (like &quot;react-materialize&quot;) which may incorrectly cache these functions and never update it on following re-renders. So when the time comes to call this callback function (e.g. on a button click), it will <strong>use the initial function value</strong>.</p>\n<p>If an initial function doesn't hold any state in its closure, it's not a big problem. But if it does, you may face a <strong>stale state</strong> issue like Matt in <a href=\"https://stackoverflow.com/questions/73697416/react-stale-usestate-value-in-closure-how-to-fix/77282546#77282546\">this StackOverflow question</a>. I also faced the issue using one of internal library components in my project which was also a modal component. I guess it happens due to usage of react's utils for creating modals (mainly <code>createPortal</code> API) which is <a href=\"https://github.com/react-materialize/react-materialize/blob/d36a4ddad2781e1eb206007c5b615033c5c1c5d5/src/Modal.js#L89\">the case</a> for <code>react-materialise</code> Modal component.</p>\n<p>The leading response on StackOverflow is correct, but there is a room for improvement which I outlined in <a href=\"https://stackoverflow.com/a/77282546/297939\">my response</a> and will unfold a bit more in this blog post.</p>\n<h2 id=\"example-of-the-issue\">Example of the issue <a class=\"direct-link\" href=\"#example-of-the-issue\">#</a></h2>\n<p>Let's take as an example a code similar to the StackOverflow question:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOpen<span class=\"token punctuation\">,</span> setIsOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State's value on render =\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// This function is created each time on every re-render</span>\n  <span class=\"token comment\">// So it holds a correct state value</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State value inside callbackFn =\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> modalOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">onCloseStart</span><span class=\"token operator\">:</span> callbackFn<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show modal</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/**\n          Modal component from react-materialize\n          We defined a callback which will be fired on modal close.\n          `options` is an object which is also created fresh on each re-render.\n          (!) But due to aggressive caching in Modal component,\n          it will use initial value of `options` prop each re-render,\n          so `onCloseStart` will have a \"stale\" value of `callbackFn`\n      */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">open</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOpen<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">options</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>modalOptions<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Update state's value\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hide modal</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Console output:</p>\n<pre><code>// Click on &quot;Show modal&quot;\nState's value on render =\n// Click on &quot;Update value&quot;\nState's value on render = new value\n// Click on &quot;Hide modal&quot;\n// (!!!) State's value is still empty inside callback\nState value inside callbackFn =\nState's value on render = new value\n</code></pre>\n<h2 id=\"solution\">Solution <a class=\"direct-link\" href=\"#solution\">#</a></h2>\n<p>To address the stale state within <code>callbackFn</code>, we utilize <code>useRef</code> to keep the latest function value, ensuring it remains updated across re-renders. Essentially, we will create a stable container (object) with <code>current</code> property and we will update <code>current</code> property on each re-render with a fresh instance of <code>callbackFn</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOpen<span class=\"token punctuation\">,</span> setIsOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State's value on render =\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In callback state =\"</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> callbackRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- the new line</span>\n  callbackRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> callbackFn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- the new line. Store the latest callbackFn on each re-render</span>\n\n  <span class=\"token keyword\">const</span> modalOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onCloseStart</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> callbackRef<span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;-- updated line</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show modal</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">open</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOpen<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">options</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>modalOptions<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Update state's value\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hide modal</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here is you can find a <a href=\"https://codesandbox.io/p/sandbox/react-stale-usestate-value-in-closure-how-to-fix-forked-tnj6x2\">working example</a> on CodeSandbox.</p>\n",
      "date_published": "2024-04-04T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/rxjs_example/",
      "url": "https://dushkin.tech/posts/rxjs_example/",
      "title": "Step-by-Step Guide. Creating a React Hook for Web Page Element Movement Using RxJS",
      "content_html": "<p>There are certain tasks for which RxJS (and overall reactive programming paradigm) is ideally suited. One such task is combining multiple &quot;streams&quot; of events to create a particular gesture. In this article, we will step-by-step write an universal React hook that allows attaching a movement gesture to any HTML element.</p>\n<h2 id=\"why-choose-these-approaches\">Why Choose These Approaches <a class=\"direct-link\" href=\"#why-choose-these-approaches\">#</a></h2>\n<p>It is possible to combine 3 event emitters (for pointerdown, pointermove, pointerup events) without using RxJS, but I hope as the narrative progresses, you will appreciate the compactness and elegance of the solution using RxJS. In addition to the aesthetic sensations, there is an objective reason - it is difficult, if not impossible, to write tests for &quot;pure&quot; event emitters.</p>\n<p>Instead of <code>MouseEvents</code>, the relatively new standard <code>PointerEvents</code> is used, which eliminates the need for writing specific code for mobile devices.</p>\n<h2 id=\"what-we-get-in-the-end\">What We Get in the End <a class=\"direct-link\" href=\"#what-we-get-in-the-end\">#</a></h2>\n<p>We'll get an application like this - <a href=\"https://codesandbox.io/p/sandbox/react-usedraggable-hook-on-rxjs-with-composable-refs-vz3pp\">https://codesandbox.io/p/sandbox/react-usedraggable-hook-on-rxjs-with-composable-refs-vz3pp</a></p>\n<p><img src=\"/img/for_posts/rxjs_example/1.png\" alt=\"Example screenshot\"><br>\nYou will be able to move the grey div vertically.</p>\n<h2 id=\"step-by-step\">Step by Step <a class=\"direct-link\" href=\"#step-by-step\">#</a></h2>\n<p>First, let's define the design of our solution. Here are its main elements:</p>\n<ul>\n<li>The logic of generating drag gesture events in a separate module. The module's API does not depend on the final framework in which it will be used. The logic should be covered by tests.</li>\n<li>We format the logic in the React application as a universal hook.</li>\n<li>Use the hook in the component that we want the user to be able to move.</li>\n<li>Correctly unsubscribe from listening to all events upon the destruction (unmount) of the react element.</li>\n</ul>\n<h2 id=\"drag-gesture-module\">Drag Gesture Module <a class=\"direct-link\" href=\"#drag-gesture-module\">#</a></h2>\n<p>A drag gesture is a gesture of moving an object across the screen. It consists of a composition of events:</p>\n<ul>\n<li>Pressed on the element (pointerdown);</li>\n<li>After that press, start listening to pointer movement events (pointermove);</li>\n<li>Listen and respond to movements by changing the style transform: <code>translateY(&lt;...&gt;px);</code></li>\n<li>Listen until the user releases (removes from the screen) the pointer (pointerup).</li>\n</ul>\n<p><img src=\"/img/for_posts/rxjs_example/2.png\" alt=\"Sequence of Events\"></p>\n<p>Here is a code for the logic:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">DragEvent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">createDragObservable</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> PointerEvent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  up$<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  down$<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  move$<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>DragEvent<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> startPosition<span class=\"token operator\">:</span> DragEvent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> down$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">mergeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      startPosition <span class=\"token operator\">=</span> startPosition <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> move$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span>up$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">-</span> startPosition<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n          y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token operator\">-</span> startPosition<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Yes, at first glance, RxJS seems to have a not very understandable API, but once you get used to it, you really start to enjoy how compactly you can describe complex operations.</p>\n<p>What is happening here:</p>\n<ul>\n<li>Our function receives three &quot;streams&quot; (we will call them &quot;streams&quot;, but in reality, this is a more general abstraction, based on the <strong>Observable</strong> pattern):</li>\n<li>a stream of mouse click events on our element — <code>down$</code>,</li>\n<li>a stream of mouse &quot;release&quot; events — <code>up$</code>,</li>\n<li>a stream of cursor movement events — <code>move$</code>.</li>\n</ul>\n<p>The arguments end with a <code>$</code> not because of a craving for money (off-screen laughter), but to indicate that these variables are streams. This is a generally accepted convention in RxJS.</p>\n<p>The function returns a new stream that sends events only when the mouse is actually moving after clicking on the element.</p>\n<p>The function's body can be literally read as: we start listening to the stream of mouse click events (<code>down$</code>), and when an event occurs, we switch to listening to another stream, which will be returned by the function inside the <code>mergeMap</code> operator.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">return</span> down$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">mergeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    startPosition <span class=\"token operator\">=</span> startPosition <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> move$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span>up$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">-</span> startPosition<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token operator\">-</span> startPosition<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The new stream in <strong>mergeMap</strong> is &quot;listening&quot; to the mouse pointer movement events <code>move$</code>, which we listen to until an event from the &quot;pointer release&quot; stream up$ appears (this is handled by the <code>takeUntill</code> operator).</p>\n<p>All events from the <code>move$</code> stream are transformed (<code>map</code> operator) into relative movement. It is relative to the initial position of the element.</p>\n<p>The test for this logic looks like this:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> marbles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"rxjs-marbles/jest\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createDragObservable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./use-draggable\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  d<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PointerEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  m<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PointerEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  u<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PointerEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useDraggable\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"emits drag events only after mousedown and end after mouseup\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">marbles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> down$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-d--------\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> move$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmmmm-mmmm\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> up$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot__</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------u--\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> expectedDrag$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-eeee-ee--\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> drag$ <span class=\"token operator\">=</span> <span class=\"token function\">createDragObservable</span><span class=\"token punctuation\">(</span>up$<span class=\"token punctuation\">,</span> down$<span class=\"token punctuation\">,</span> move$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      m<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>drag$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeObservable</span><span class=\"token punctuation\">(</span>expectedDrag$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Here, the library that facilitates testing RxJS is used - <a href=\"https://github.com/cartant/rxjs-marbles\">https://github.com/cartant/rxjs-marbles</a></p>\n<p>Its API is based on the same scheme for describing streams that is used to explain a solution that uses streams - marble diagram, or bead diagram. A typical diagram might look like this:</p>\n<p><img src=\"/img/for_posts/rxjs_example/3.png\" alt=\"typical diagram rxjs\"></p>\n<p>The diagram explains the principle of the <code>takeUntill</code> operator.<br>\nIn this example, the first thread is a stream of some events (in our case, it is the <code>move$</code> stream - pointer movement), the second stream is the argument of the <code>takeUntil</code> operator, an emit event in this stream &quot;stops&quot; the emit event in the resulting stream (in our case, the emit event &quot;pointer lifted&quot; in the <code>up$</code> stream stops listening to pointer movement events).</p>\n<p>Similarly, our test on <strong>rxjs-marbles</strong> is read:</p>\n<ul>\n<li>&quot;-&quot; means that nothing is emitted at this time quantum</li>\n<li>&quot;d&quot; means that event d is emitted. The second argument is a map where the index d corresponds to a PointerEvent object.</li>\n<li>&quot;m&quot;, &quot;u&quot;, &quot;e&quot; - is the same kind of event emit, but with different meanings.</li>\n</ul>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> down$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-d--------\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> move$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmmmm-mmmm\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> up$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot__</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------u--\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> expectedDrag$ <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">hot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-eeee-ee--\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>drag$</code> is the stream created by our function, expectedDrag$ are the values that drag$ should emit after processing the streams.</p>\n<p>Accordingly, the line:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">m<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>drag$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeObservable</span><span class=\"token punctuation\">(</span>expectedDrag$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>launches the test check.</p>\n<h2 id=\"universal-react-hook-for-adding-%22movability%22-to-html-elements\">Universal React Hook for Adding &quot;Movability&quot; to HTML Elements <a class=\"direct-link\" href=\"#universal-react-hook-for-adding-%22movability%22-to-html-elements\">#</a></h2>\n<p>Hook's code:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useDraggable</span><span class=\"token punctuation\">(</span>draggableRef<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> drag$ <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Observable<span class=\"token operator\">&lt;</span>DragEvent<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>draggableRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> down$ <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromEvent</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>PointerEvent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>draggableRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointerdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> move$ <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromEvent</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>PointerEvent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointermove\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> up$ <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">fromEvent</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>PointerEvent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pointerup\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    drag$<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">createDragObservable</span><span class=\"token punctuation\">(</span>up$<span class=\"token punctuation\">,</span> down$<span class=\"token punctuation\">,</span> move$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>draggableRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> drag$<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The hook takes a <code>ref</code> as input, which will contain a link to the HTML element to which we are adding the ability to move.</p>\n<p>Since the <code>down$</code> event stream can only be obtained after react renders all HTML elements (componentDidMount, or the function in useEffect, useLayoutEffect hooks), we will use <code>useRef</code> to create a mutable container into which we will write the drag gesture stream.</p>\n<p>This <code>RefObject</code> is what we return from the hook.</p>\n<h2 id=\"using-the-hook-in-a-component\">Using the Hook in a Component <a class=\"direct-link\" href=\"#using-the-hook-in-a-component\">#</a></h2>\n<p>The code of the component in which we use all this looks like this:</p>\n<p><img src=\"/img/for_posts/rxjs_example/component.png\" alt=\"Source code of component\"></p>\n<p>We have created a container (ref-object), into which react will place a link to the rendered HTML element - <code>draggableDivRef</code>. This object was given as an argument in our hook - <code>useDraggable</code>.</p>\n<p>In the <code>useLayoutEffect</code> hook, we described the logic of reacting to events - we update the position of the element along the Y-axis by setting the style:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">draggableDivRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateY(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>And do not forget to unsubscribe from all events:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dragSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And this is actually a very important part of our RxJS-based solution - we unsubscribed from the <code>drag$</code> event stream, but in fact, since it consists of a combination of three other streams, there was also an unsubscribe from these three streams (r<code>up$, down$, move$</code>). And this is one of the key selling points of RxJS-based solutions compared to working with traditional <strong>Event Emitter</strong> - in <strong>Event Emitter</strong> there is no cascading unsubscribe from events, and you have to handle this yourself in the code, and it is often difficult to keep track of.</p>\n<p>The second key advantage of RxJS over the usual <strong>Event Emitter</strong> is the ability to test all the components of the solution: the beginning of the subscription to events, the sequence of events between several streams, the values emitted by the streams at one time or another, and the end of the subscription to events.</p>\n<h2 id=\"how-the-solution-can-be-improved-further\">How the Solution Can Be Improved Further <a class=\"direct-link\" href=\"#how-the-solution-can-be-improved-further\">#</a></h2>\n<p>Add support for `pointercancel`` events and others to cancel the gesture not only by lifting the pointer, but also by an incoming call, for example. You can learn more about working with PointerEvents and gestures in general in the lecture I prepared for the School of Interface Development at Yandex - <a href=\"https://www.youtube.com/watch?v=VZAcd2svW7w\">https://www.youtube.com/watch?v=VZAcd2svW7w</a></p>\n<p>It is also worth writing tests that take into account not only the order of events but also specific movement values. That is, to test that if there were two pointermove events with a 10px shift each, then the total shift will be 20px.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>Yes, to solve not the most complex problem, we touched on so many topics: react, hook, refs, useEffect, rxjs, marbles, jest, and many others. Someone will say that this is over-engineering (i.e., too complex a solution to a simple problem) and they may be right, it all depends on the context!</p>\n<p>If you need an object movement gesture, you can use one of a dozen libraries, but usually 90% of the code that you will include to JS bundle won't be used (since it's usually a generic solution for various use cases). Typically, they do not have tests. However, if you have a startup, then this is a quite workable option.</p>\n<p>You could have avoided using RxJS, but I can't imagine a solution that would be read and understood faster, would be more isolated, and for which it would be easier to write tests. If you, dear reader, know of such a thing - tell me in <a href=\"https://twitter.com/sky2high0\">twitter/x</a>! I sincerely wish to see it!</p>\n<h2 id=\"resources-for-learning-rxjs\">Resources for Learning RxJS <a class=\"direct-link\" href=\"#resources-for-learning-rxjs\">#</a></h2>\n<ul>\n<li><a href=\"https://reactivex.io/\">&quot;The first&quot; site</a> on Rx technology with a collection of basic implementations and a description of the approach. It's not very understandable, but comprehensive.</li>\n<li><a href=\"https://www.learnrxjs.io/\">An excellent and understandable reference for many RxJS operators</a>. I used to open it quite often.</li>\n<li><a href=\"https://dev.to/creeland/intro-to-rxjs-concepts-with-vanilla-javascript-4aji\">An introduction to RxJS through writing your own implementation of the approach in regular JS In English</a>. The examples in JS are understandable and simple.</li>\n<li><a href=\"https://benlesh.medium.com/\">Blog of Ben Lash</a> - the main maintainer of the Github repo RxJS.</li>\n</ul>\n",
      "date_published": "2024-01-07T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/personal_task_management_with_obsidian/",
      "url": "https://dushkin.tech/posts/personal_task_management_with_obsidian/",
      "title": "Personal task management with Obsidian",
      "content_html": "<p>As we discussed in the post <a href=\"https://dushkin.tech/posts/when_you_overwhelmed_simplify/\">&quot;When you're overwhelmed, simplify&quot;</a>, simplifying complex tasks is crucial. This is especially true when you're involved in multiple workstreams and collaborate with dozens of people simultaneously daily.</p>\n<p>In situations like these, my main approach is to keep information well-organized and enhance workflow with some automation, which includes:</p>\n<ul>\n<li>Gathering all input that helps in solving tasks,</li>\n<li>Structuring tasks by categorizing them into projects,</li>\n<li>Ranking projects by their current importance,</li>\n<li>Highlighting the most important tasks at the moment,</li>\n<li>Preserving a list of completed tasks for compiling a performance self-review.</li>\n</ul>\n<h2 id=\"obsidian\">Obsidian <a class=\"direct-link\" href=\"#obsidian\">#</a></h2>\n<p>My tool of choice helping to harness daily chaos is a free markdown-based editor <a href=\"https://obsidian.md/\"><strong>Obsidian</strong></a>. If you're interested why I choose Obsidian over Notion, Logseq, Apple Notes and other tools see <a href=\"https://dushkin.tech/posts/my_productivity_tools/\">this post</a>.</p>\n<p>TLDR: Obsidian is fast and secure (everything is stored locally), has excellent mobile apps, has a great plugin ecosystem, and seems like a high-quality product (I faced zero bugs for the past year). Although it's free and you can sync files via any cloud storage, it's somewhat non-trivial to set it up for iOS. So, in the end, I bought a built-in Obsidian cloud sync solution for personal use, and for work, I use a different vault which lives only on a corp laptop.</p>\n<h2 id=\"the-workflow\">The workflow <a class=\"direct-link\" href=\"#the-workflow\">#</a></h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/l5n8VvumNrc?si=AT_dJbYTBj4YHuHa\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n<p><em>Video with process in the nutshell: creating tasks, listing most important tasks, archiving tasks</em></p>\n<p>The process is focused around:</p>\n<ul>\n<li><strong>&quot;Tasks&quot;</strong> page with a following structure:\n<ul>\n<li>First section is <strong>High-priority tasks</strong>.</li>\n<li>Second section is <strong>Projects list</strong> sorted by projects' priority.</li>\n<li>Third section is for tasks without specific project.</li>\n</ul>\n</li>\n<li><strong>&quot;Completed tasks&quot;</strong> page. It's a great starting point for performance review.</li>\n<li>Unique page for each project I'm involved in.</li>\n</ul>\n<h3 id=\"tasks%3A-high-priority-tasks\">Tasks: High-priority tasks <a class=\"direct-link\" href=\"#tasks%3A-high-priority-tasks\">#</a></h3>\n<p>This section is generated by filter provided by &quot;<a href=\"https://publish.obsidian.md/tasks/Introduction\">Tasks</a>&quot; community plugin. Here's how query looks like:</p>\n<pre><code>```tasks\nnot done\npriority is above medium\n```\n</code></pre>\n<p>It's a live list which auto-updates on changes. &quot;Tasks&quot; plugin provides tons of filters. I also use one more filter on tasks with <code>#code</code> tag to distinguish tasks where I need to code something. I'm trying to plan my day in way to spend a least some time on coding.</p>\n<h3 id=\"tasks%3A-projects-list\">Tasks: Projects list <a class=\"direct-link\" href=\"#tasks%3A-projects-list\">#</a></h3>\n<p>Each item is a project's title and a list of related tasks. Each project's title is also a linked reference to another page which contains important information on a project like:</p>\n<ul>\n<li>Short description,</li>\n<li>Links to documents,</li>\n<li>Timelines,</li>\n<li>Involved colleagues,</li>\n<li>etc.</li>\n</ul>\n<h3 id=\"completed-tasks\">Completed tasks <a class=\"direct-link\" href=\"#completed-tasks\">#</a></h3>\n<p>&quot;Archiver&quot; plugin moves completed tasks to this designated page. This is a great help during performance review and overall helps when you want to remember what's done and what's left to do.</p>\n<h2 id=\"other-aspects-of-obsidian-i-use\">Other aspects of Obsidian I use <a class=\"direct-link\" href=\"#other-aspects-of-obsidian-i-use\">#</a></h2>\n<p>Plugins:</p>\n<ul>\n<li>&quot;<strong>Daily Note</strong>&quot; plugin: it's great core plugin which creates a new note everyday so you don't need to think twice when you need quickly to note something. So, you can save a bit more brain power.</li>\n<li>&quot;<strong>Task Archiver</strong>&quot; community plugin: it helps gathering completed tasks in a dedicated page. I configured it to move completed tasks to a different page like this:\n<ul>\n<li><img src=\"/img/for_posts/task_management/task_managment_archiver_setup.png\" alt=\"Archiver plugin setup\"></li>\n</ul>\n</li>\n<li>&quot;<strong>Omnisearch</strong>&quot; community plugin: it gives in-text search capabilities. Hope it will make to core since text search is essential for such app IMHO.</li>\n<li>&quot;<strong>Outliner</strong>&quot; community plugin: it gives almost everything I need for operations with lists like shortcuts, indentation lines, etc. With this Obsidian becomes a proper outliner.</li>\n</ul>\n<p>Also I make extensive use of Obsidian's <strong>inter-linking</strong> feature, which organizes references quickly and effectively. By inter-linking I mean wrapping topic, peoples, subjects, etc. in <code>[[]]</code> so it becomes a link to a page. For instance, during the meeting I can write to a fresh daily note a few lines about some project like: &quot;Before the launch of <code>[[SDP]]</code> project we need to complete a security review&quot;. And once I'll open SDP's project page I immediatly will see a backlink to this note. Very helpful!</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>In the process outlined above, I've aimed to strike the right balance between the complexity of the workflow and the value it delivers. Hope it will hit the right spot for you too!</p>\n<h2 id=\"references\">References <a class=\"direct-link\" href=\"#references\">#</a></h2>\n<ol>\n<li>Stephen Wolfram, <a href=\"https://writings.stephenwolfram.com/2019/02/seeking-the-productive-life-some-details-of-my-personal-infrastructure/\">Seeking the Productive Life: Some Details of My Personal Infrastructure</a>. Amazing article by Stephen Wolfram on his 30 years+ productivity journey.</li>\n<li>Michael Morowitz, <a href=\"https://www.morowitz.com/blog/obsidian-tasks/how-i-manage-tasks-in-obsidian/#:~:text=The%20Obsidian%20system%20is%20driven,as%20repeatable%20habits%20or%20checklists\">How I Manage Tasks (and more) in Obsidian</a>. Great post with even more automations around task management via Obsidian. That's where I found out about Archiver plugin. Previously I used Text Transport plugin which is less suitable for tasks specifically.</li>\n<li>Bas Korsten, <a href=\"https://hbr.org/2021/06/train-your-brain-to-be-more-creative\">Train Your Brain to Be More Creative</a>. Just a nice article on HBR on improving productivity via engaging with nature, moving, connecting with more people, mediations.</li>\n<li>Keita Umejima, Takuya Ibaraki, Takahiro Yamazaki, Kuniyoshi L. Sakai. <a href=\"https://www.sciencedaily.com/releases/2021/03/210319080820.htm\">Paper Notebooks vs. Mobile Devices: Brain Activation Differences During Memory Retrieval</a>.</li>\n</ol>\n",
      "date_published": "2023-10-21T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/gpt_driven_browser_extension_experiment/",
      "url": "https://dushkin.tech/posts/gpt_driven_browser_extension_experiment/",
      "title": "Creating browser extension with ChatGPT as a main development driver (spoiler: it&#39;s a mess :))",
      "content_html": "<p>I decided to join a wave and write a simple browser extension relying on ChatGPT help. The extension uses GPT to summarise the article on the current page.<br>\nAt first, everything looked surprisingly smooth. GPT gave a complete file structure and contents for it. Wow!😲</p>\n<p><img src=\"/img/for_posts/gpt-toolbelt/gpt-response-0.png\" alt=\"GPT response on initial request\"></p>\n<h2 id=\"bug-one---old-api\">Bug one - Old API <a class=\"direct-link\" href=\"#bug-one---old-api\">#</a></h2>\n<p>It was not working, though, since it was replaced with comments article's content extraction and API calls. But It's okay.<br>\nAfter asking to use a specific library for extraction (Readability.js) and a particular OpenAI API for summarisation, it produced, at first sight, quite worthy code. With one minor issue -- it was not working. 🤷‍♂️ I asked how to debug an extension and started debugging.</p>\n<p>The first issue was that GPT suggested using old (inexistent) OpenAI API. I googled the current one and modified the code.</p>\n<h2 id=\"bug-two---%22forgot%22-about-permissions-to-not-used-chrome-api\">Bug two - &quot;forgot&quot; about permissions to not used Chrome API <a class=\"direct-link\" href=\"#bug-two---%22forgot%22-about-permissions-to-not-used-chrome-api\">#</a></h2>\n<p>Secondly, it used <code>chrome.local.storage</code> but forgot to set permissions for it in manifest.json. I showed GPT an error, and GPT apologised and answered with the correct instructions.</p>\n<p>The funny thing is that storage is not used anyhow in the app! 🥲<br>\nI asked GPT, &quot;why do you need storage anyway?&quot;.<br>\nGPT:<br>\n<img src=\"/img/for_posts/gpt-toolbelt/gpt-response-1.jpg\" alt=\"GPT response on storage question\"></p>\n<p>Finally, we are at the stage of making the correct API request without errors in JS!</p>\n<h2 id=\"bug-three---incorrect-api-request-params\">Bug three - incorrect API request params <a class=\"direct-link\" href=\"#bug-three---incorrect-api-request-params\">#</a></h2>\n<p>But it turned out it wasn't initially correctly calling API. I inspected the API response and found that it returned empty <code>choices[0].text and choices[0].finish_reason === &quot;length&quot;</code><br>\n<img src=\"/img/for_posts/gpt-toolbelt/gpt-response-2.jpg\" alt=\"GPT response on API question\"></p>\n<p>Okay, it so turned out max_tokens shouldn't be 0. Who would have thought...</p>\n<h2 id=\"bug-four---mess-after-multiple-rewrites\">Bug four - mess after multiple rewrites <a class=\"direct-link\" href=\"#bug-four---mess-after-multiple-rewrites\">#</a></h2>\n<p>Let's try again. It was not working. A problem in <code>background.js</code>, it cannot read the id from the tab. Telling the error again and got a fixed version.<br>\nAt last, behold the successfully functioning extension!<br>\n<img src=\"/img/for_posts/gpt-toolbelt/gpt-toolbelt-screenshot.jpeg\" alt=\"Screenshot of working browser extension summarising article\"></p>\n<p>The code can be improved by the way. For instance, great articles can easily exceed the input of the used model (varies for different models). It's 1500 words for most models. And around 7000 for a few more expensive ones.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>It's really impressive if you know what you are doing! It helped me to skip the boring steps of exploring Chrome Extension API (although I'm a bit familiar with it) and concentrate on exciting part -- working with GPT API.</p>\n<p>But it produced buggy code. It looks like during a single response, it's not taking into account a beginning of a reply. Meaning that it produced valid <code>manifest.json</code> at first but while it was writing <code>background.js</code> and started using Storage API it &quot;forgot&quot; that permissions for it wasn't included in <code>manifest.json</code> in the first place.</p>\n<p>Is it a fundamental flaw of LLM since it's essentially an &quot;autocomplete&quot; or it's a limitation of the current utilisation method? Will see :)</p>\n<p>Extension's source code - <a href=\"https://github.com/DimitryDushkin/gpt-toolbelt\">https://github.com/DimitryDushkin/gpt-toolbelt</a></p>\n",
      "date_published": "2023-03-26T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/logseq_tasks_plugin/",
      "url": "https://dushkin.tech/posts/logseq_tasks_plugin/",
      "title": "Logseq task completion tracker plugin",
      "content_html": "<p>One tool that I've found helpful in managing my workload is a <strong>task list</strong>. However, manually writing down what I've accomplished and what still needs to be done each week can be time-consuming and tedious.</p>\n<p>Recently, I discovered <strong><a href=\"https://logseq.com\">Logseq</a></strong>, a powerful tool for keeping track of tasks, notes, and more. As I began to explore its features, I realized that I could take my task management to the next level by automating the process of report generation.</p>\n<p>With this in mind, I set out to create a Logseq plugin that would automate the report generation of tasks done for a given period.</p>\n<p>This plugin adds <code>completed:: &lt;today&gt;</code> property to task upon checking it. Also it adds <strong>slash command</strong> with a query <strong>to get tasks done last week</strong> : <code>Completed tasks for the past week</code></p>\n<ul>\n<li>Github — <a href=\"https://github.com/DimitryDushkin/logseq-plugin-task-check-date\">https://github.com/DimitryDushkin/logseq-plugin-task-check-date</a></li>\n<li>The plugin is now available in the Logseq Marketplace. Look for &quot;<strong>Task completion</strong>&quot;.</li>\n</ul>\n",
      "date_published": "2023-01-21T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/task_planning_algorithm/",
      "url": "https://dushkin.tech/posts/task_planning_algorithm/",
      "title": "Task planning algorithm in TypeScript: real-life problem solved with a graph theory",
      "content_html": "<p>In this article, I’ll present the algorithm which helps to answer the main question of all project planning efforts:</p>\n<blockquote>\n<p>When will it be done?</p>\n</blockquote>\n<p>A more formal representation of this problem sounds like: “Having some tasks which might depend on each other and some folks which can do those tasks when a milestone can be reached?”</p>\n<p>Weekly sprint planning meeting in essence</p>\n<h1 id=\"a-little-backstory\">A Little Backstory <a class=\"direct-link\" href=\"#a-little-backstory\">#</a></h1>\n<p>In 2019-2021 I work as a tech lead. I was responsible for 3 different projects with a team of 11 developers, 2 managers, 2 designers, and several departments to cooperate with.</p>\n<p>For task tracking, we’re using our internal tool <a href=\"https://yandex.ru/tracker/\">Yandex Tracker</a> which is mostly like Jira. But it has no tools that’ll help to find the answer for an eternal question: “When?”. That’s why from time to time we manually sync tasks with <strong>Omniplan</strong>. Turned out that it’s the tool that solves almost all project planning problems and moreover it has an <strong>auto-planning feature</strong> so all situations when one assignee has workload over 100% are resolved automatically.</p>\n<p>Still, it has some drawbacks:</p>\n<ul>\n<li>Slow and unreliable project sync between team mates based on a local copy syncing</li>\n<li>MacOS only</li>\n<li>Quite hard to sync it with our issue tracker</li>\n<li>Pricey: $200 and $400 for Pro edition</li>\n</ul>\n<p>So I’ve decided to try to make my own Omniplan version with blackjack and hookers that would be:</p>\n<ul>\n<li>Web-based</li>\n<li>Simple syncing with our tracker</li>\n<li>With real-time collaboration</li>\n</ul>\n<p>The most exciting part was to make <strong>a scheduling engine</strong>. I didn’t understand why only Omniplan has such an essential feature. Now I do.</p>\n<p>So this article is about scheduling.</p>\n<h1 id=\"developing-a-scheduling-engine\">Developing a scheduling engine <a class=\"direct-link\" href=\"#developing-a-scheduling-engine\">#</a></h1>\n<p>First I’ve done some research. I’ve googled for solving scheduling tasks in general and found a lot of about <a href=\"https://en.wikipedia.org/wiki/Gantt_chart\">Gantt</a>, <a href=\"https://en.wikipedia.org/wiki/Program_evaluation_and_review_technique\">PERT</a>, but haven’t found any practical algorithms.</p>\n<p>Then I looked for open-source libraries and found only one: <a href=\"https://github.com/bryntum/chronograph\">Bryntum Chronograph</a>. It seems like something I was looking for all the time. They even have <a href=\"https://github.com/bryntum/scheduler-performance\">benchmarks</a>. But, well, talking honestly I didn’t understand <a href=\"https://github.com/bryntum/chronograph/blob/master/src/chrono/Graph.ts\">any of its code</a> and almost complete lack of documentation didn’t help either. I thought maybe, what if I could write it from scratch with less code.</p>\n<p>So, as usual, I’ve tried to draw the problem.</p>\n<p><img src=\"/img/for_posts/task_planning/1.png\" alt=\"Timeline of tasks before scheduling\"><br>\n<em>Timeline of tasks before scheduling</em></p>\n<p>While drawing it I’ve probably got the most important insight: tasks can be represented as a directed graph and edges are not only the explicit dependencies but also <em>implicit dependencies by the same assignee</em>.</p>\n<p>The following algorithm should lead to such tasks arrangement:</p>\n<p><img src=\"/img/for_posts/task_planning/2.png\" alt=\"Timeline of tasks after scheduling\"><br>\n<em>Timeline of tasks after scheduling</em></p>\n<p>Let’s consider what a task is:</p>\n<p><img src=\"/img/for_posts/task_planning/3.png\" alt=\"Task anatomy\"><br>\n<em>Task anatomy</em></p>\n<p>There are some not so obvious properties of a task:</p>\n<ul>\n<li><strong>Duration</strong>. The task is being done only during <em>business</em> days and the number of <em>business</em> days is an <em>estimation</em> of a task. So in this example the task starts on 2 March, has an estimation of 6 days, so it will end on 9 March (<em>not 7 March</em>), because 7 and 8 March are holidays.</li>\n<li><strong>Position</strong>. In this model, we assume that tasks with lower positions (same as a higher priority) should be done earlier than a task with higher positions (or lower priority).</li>\n<li><strong>Progress</strong>. It is a portion of a task that can be represented in percents but in fact, it is a number of days that were spent on a task. For example, if a task is estimated up to 4 days and, then progress is 75%, that 1 day left to task completion.</li>\n</ul>\n<p>So TypeScript type is as follows (<em>ID is just an alias for string</em>):</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Task</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  start<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  end<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  duration<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Approximation of priority\n   */</span>\n  position<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  progress<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  resourceId<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * Current task blocked by these tasks (depends on)\n   */</span>\n  blockedBy<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">ID</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"the-algorithm\">The algorithm <a class=\"direct-link\" href=\"#the-algorithm\">#</a></h1>\n<p>In essence, the algorithm should change start and end dates of the tasks in the following way:</p>\n<ol>\n<li>Tasks should start today if it is possible</li>\n<li>It should be impossible to start a task today if it has other tasks as prerequisites that are unfinished. In that case, a task should start right after the last prerequisite’s end date.</li>\n</ol>\n<p>Pretty simple, huh? 🙈</p>\n<p>The main steps of the algorithm are:</p>\n<ol>\n<li><strong>Build a graph from tasks.</strong> Make edges taking into account explicit dependencies and implicit dependencies by the same assignee.</li>\n</ol>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Graph respects explicit dependencies\n * and implicit by resources (via positions)\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> makeGraphFromTasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Graph <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// task and blockedBy</span>\n  <span class=\"token keyword\">const</span> graph<span class=\"token operator\">:</span> Graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resourcesTasks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map<span class=\"token operator\">&lt;</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">>></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create graphs</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> t <span class=\"token keyword\">of</span> tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resource and its tasks</span>\n    <span class=\"token keyword\">const</span> tasksOfResource <span class=\"token operator\">=</span> resourcesTasks<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>resourceId<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    tasksOfResource<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    resourcesTasks<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>resourceId<span class=\"token punctuation\">,</span> tasksOfResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>blockedBy <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Now add deps</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> tasksOfResource <span class=\"token keyword\">of</span> resourcesTasks<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// first sort by position so links of tasks starts with higher position</span>\n    <span class=\"token comment\">// then topological sort to reduce cyclic deps</span>\n    tasksOfResource<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>position <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// is toposort needed?</span>\n    <span class=\"token keyword\">const</span> sortedTasks <span class=\"token operator\">=</span> <span class=\"token function\">toposort</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> tasksOfResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add to graph such edges so current node has prev as dependency (blocked by prev)</span>\n    <span class=\"token keyword\">let</span> prevTask<span class=\"token operator\">:</span> Task <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> task <span class=\"token keyword\">of</span> sortedTasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        prevTask <span class=\"token operator\">&amp;&amp;</span>\n        prevTask<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> task<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token comment\">// has no incoming edge as well (otherwise it will be cyclic dep)</span>\n        <span class=\"token operator\">!</span>graph<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>prevTask<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        graph<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>prevTask<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      prevTask <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>2.Remove circular dependencies.</strong> If cycles are present throw an error because that means that some task A has as prerequisite task B and task B has as prerequisite task A, which is a classic problem of <a href=\"https://en.wikipedia.org/wiki/Circular_dependency\">circular dependency</a> and the problem should be resolved manually. Tasks A and B do not necessarily have an explicit dependency on each other, there are might some other tasks between them.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Main source of cyclic dependencies is previous step where graph is created\n * Often top-level task has same owner as children tasks\n * Since we create edge in graph also by same owner that's why there is cyclic deps\n *\n * IDEA: mitigate the issue by starting DFS walk from top-level (source) tasks!\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> removeCyclicDependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  graph<span class=\"token operator\">:</span> Graph<span class=\"token punctuation\">,</span>\n  tasks<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Track visited to avoid computing path for already computed nodes</span>\n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cyclicDepsRemovedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfsAndRemove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rootTaskId<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [current task ID, set of previously visited tasks]</span>\n    <span class=\"token keyword\">const</span> stack<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">ID</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>rootTaskId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> nextValue <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">nullthrows</span><span class=\"token punctuation\">(</span>nextValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>taskId<span class=\"token punctuation\">,</span> prevSet<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextValue<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> blockedBy <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>taskId<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>taskId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> blockedById <span class=\"token keyword\">of</span> blockedBy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// cycle detected!</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>blockedById<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// remove that edge</span>\n          blockedBy<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>blockedById<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cyclicDepsRemovedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> newPrevSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>prevSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newPrevSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>blockedById<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>blockedById<span class=\"token punctuation\">,</span> newPrevSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> task <span class=\"token keyword\">of</span> tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">dfsAndRemove</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cyclic deps removed:\"</span><span class=\"token punctuation\">,</span> cyclicDepsRemovedCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>3. Visit every node (task) and update a start and end dates.</strong> Visiting should be performed starting from the task with higher priority</p>\n<p>If a task is a source (it is not a prerequisite for any other task and task’s assignee has no other task to do before this task) or a task is disconnected node (it has no dependencies and it is not prerequisite for any other tasks) then we start task today.</p>\n<p>Otherwise, a task has prerequisites and its start date should be set to the latest end date of its prerequisites tasks.</p>\n<p>Also, it is important to correctly <strong>update an end date while setting a start date of a task</strong>. We should take into account actual business days and the progress of a task.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> scheduleTasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  inputTasks<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  today<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dayBeforeToday <span class=\"token operator\">=</span> <span class=\"token function\">subtractDays</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tasks<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span> <span class=\"token operator\">=</span> inputTasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>t <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tasksById<span class=\"token operator\">:</span> TasksById <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">makeGraphFromTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cyclesToFullyUpdateDates <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 1. Remove cyclic dependencies</span>\n  <span class=\"token function\">removeCyclicDependencies</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Initial update of all tasks start and ends days taking into account business days</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> task <span class=\"token keyword\">of</span> tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateTaskDatesByStart</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Repeat until dates remains unchanged, max graph.size times.</span>\n  <span class=\"token comment\">// Similar to optimization in Bellman-Ford algorithm</span>\n  <span class=\"token comment\">// @see https://en.wikipedia.org/wiki/Bellman–Ford_algorithm#Improvements</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> isAnyTaskTimelineChanged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>taskId<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasksById<span class=\"token punctuation\">[</span>taskId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// if blockedBy task not in initial data set</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> blockedByTasks <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>blockedById<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> tasksById<span class=\"token punctuation\">[</span>blockedById<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// do not take into account tasks not in graph</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> blockedByEndDates <span class=\"token operator\">=</span> blockedByTasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// add dayBeforeToday by default, so task without blockedBy starts on today</span>\n      blockedByEndDates<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dayBeforeToday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Start task on the next day after previous (blockedBy) tasks ends</span>\n      <span class=\"token keyword\">const</span> maxBlockedByEndDate <span class=\"token operator\">=</span> <span class=\"token function\">addDays</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDateTime</span><span class=\"token punctuation\">(</span>blockedByEndDates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> isTaskTimelineUpdated <span class=\"token operator\">=</span> <span class=\"token function\">updateTaskDatesByStart</span><span class=\"token punctuation\">(</span>\n        task<span class=\"token punctuation\">,</span>\n        maxBlockedByEndDate\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTaskTimelineUpdated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isAnyTaskTimelineChanged <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAnyTaskTimelineChanged <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cyclesToFullyUpdateDates<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAnyTaskTimelineChanged <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">===</span> tasks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'It\\'s not enought \"tasks.length\" interations to fully schedule all tasks!'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cycles to fully update dates </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cyclesToFullyUpdateDates<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tasks<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for better representation</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toposort</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"what-can-be-improved\">What can be improved <a class=\"direct-link\" href=\"#what-can-be-improved\">#</a></h1>\n<ol>\n<li>Probably the most important feature which leads to a more complex solution is introducing <strong>a desirable start date</strong> of a task. I didn’t research it yet, but if someday it will grow to a standalone web-service I think it should be done. Now, this feature can be mitigated by setting proper priorities of tasks.</li>\n<li>For the enterprise-grade solution, it is important to take into account vacations and public holidays. I think <strong>updateStartDate</strong> function can be quite easily updated to support this functionality.</li>\n<li>For my case having a <strong>day</strong> as a time quant was okay, but I believe for some people <strong>hour</strong>-based planning might be important. I think implementing an hour-based quant can also introduce some complications to code.</li>\n</ol>\n<h1 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h1>\n<p>The code from the article you can find <a href=\"https://github.com/DimitryDushkin/project-tasks-scheduling-engine\">here</a>. You can grab and use it as an <a href=\"https://www.npmjs.com/package/project-tasks-scheduling-engine\">NPM package</a>.</p>\n<p>I’m wondering if a presented solution has some flaws. If you spotted some please contact me here or on <a href=\"https://github.com/DimitryDushkin/project-tasks-scheduling-engine/issues\">issues section in Github</a>.</p>\n",
      "date_published": "2022-11-15T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/when_you_overwhelmed_simplify/",
      "url": "https://dushkin.tech/posts/when_you_overwhelmed_simplify/",
      "title": "When You’re overwhelmed, simplify",
      "content_html": "<p><em>by Nataliia Dushkina (<a href=\"https://github.com/indra-uolles\">https://github.com/indra-uolles</a>)</em></p>\n<p>When I saw this phrase, I felt that somebody had crept into my head and was stealing thoughts out of it :D Seriously, it’s one of my main work principles that I try to follow.</p>\n<p>Let me give an example of how to use this principle when you work as a front-end developer.q</p>\n<p>Not long ago, I was involved in large legacy project update tasks. Its current front-end framework version was 2, and we were going to promise that we’ll update it to 13 quickly enough.</p>\n<p>There was a problem, though. Several people tried to do a proper update (like it’s advised in official docs) to the next version, but they encountered different weird bugs and got stuck. To understand these errors, one would have to be a real open-source ninja. The Update task was starting to seem impossible.</p>\n<p>As a former scientist, I know that when there is a <em>BIG, UNKNOWN SMTH</em>, you have to find a small piece you can do and try to understand this by chewing off that little piece first. So I asked our team lead to give me a couple of days to test a minor jump update to version 5. He wasn’t happy about my suggestion, but since no one had better recommendations, he allowed me to do it.</p>\n<p>The first thing I did was remove auth code from backend. I commented out some things and hardcoded others, so the backend would always think I’m a particular user who is logged in. Then I created a new project from a template with framework version 5 and started to restore a little feature by dragging little pieces of code from the old front-end.</p>\n<p>Everybody kept telling me that it was ineffective and would take too much time to update the whole project this way. I kept saying it was just a little investigation which I’ll be ready to drop as soon as somebody found a better approach. After a couple of days, another developer joined me, though he was still sceptical about all these “pieces dragging”.</p>\n<p>Guess what? After another couple of days doing this, he suddenly understood how this legacy app differs from a typical app created with such framework. Now he was able to jump update to version 5 all the codebase. He spent several days doing that and succeeded.</p>\n<p>In other words, my piece of advice <strong>is if you see something big you don’t know how to tackle, think about what little investigation you could do, even if deadlines are harsh.</strong></p>\n",
      "date_published": "2022-11-10T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/principles_of_engineering_excellence/",
      "url": "https://dushkin.tech/posts/principles_of_engineering_excellence/",
      "title": "Principles of engineering excellence",
      "content_html": "<p>For the past 12 years of creating software for money, I started to sense the presence of <strong>generic principles of engineering excellence</strong>. This sense includes not only code decisions but also concepts around software development: collaboration, management, product evolvement and others. Violating these rules feels like &quot;bad smells&quot; mentioned in [[&quot;Refactoring&quot; by Martin Fowler]] but more generically.</p>\n<p>I plan to update this note from time to time because the &quot;sense&quot; mentioned above is blurry, and so is the interpretation.</p>\n<h2 id=\"core-principles\">Core principles <a class=\"direct-link\" href=\"#core-principles\">#</a></h2>\n<ul>\n<li>Engineering excellence is a process of <strong>harnessing codebase chaos</strong> by reducing an <strong>entropy</strong></li>\n<li>Code should have a structure <strong>simple for a fast high-level understanding</strong></li>\n<li>Logic is understandable from code and has no surprises, i.e. no hidden dependencies and unexpected side-effects</li>\n</ul>\n<h2 id=\"why\">Why <a class=\"direct-link\" href=\"#why\">#</a></h2>\n<ul>\n<li>Eventually, to <strong>make a better product</strong>!</li>\n<li>Keep a <strong>good developer experience</strong> tightly connected to a result.</li>\n</ul>\n<h2 id=\"how\">How <a class=\"direct-link\" href=\"#how\">#</a></h2>\n<ul>\n<li><strong>Reducing amount of code</strong> by introducing re-usable modules\n<ul>\n<li>Make reusable code the best quality possible: it's fast, covers edge cases, and is fully specified by documentation and tests.</li>\n<li><strong>Reusable code is s a foundation of a technical side of a product. This code includes libraries and frameworks.</strong></li>\n</ul>\n</li>\n<li><strong>End-to-end (E2E) and unit-tests</strong></li>\n<li><strong>Knowledge sharing</strong>: documentation (inc. good doc in E2E tests), internal talks, etc.</li>\n</ul>\n<h2 id=\"trade-offs\">Trade-offs <a class=\"direct-link\" href=\"#trade-offs\">#</a></h2>\n<p>Engineering excellence is <strong>not an ultimate goal</strong> (see &quot;Why&quot;). These aspects of product development should be taken into consideration each time before investing time in engineering excellence:</p>\n<ul>\n<li><strong>Product maturity</strong>\n<ul>\n<li>E.g. there is no sense in investing in own components library to build an MVP</li>\n</ul>\n</li>\n<li><strong>Team maturity</strong>\n<ul>\n<li>E.g. you'll unlikely create a good custom ORM if you delegate this task to a junior developer, at least in a reasonable amount of time.</li>\n</ul>\n</li>\n<li><strong>Business reasons</strong>\n<ul>\n<li>E.g. writing end-to-end tests for features which likely to be dropped.</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2022-11-06T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/my_productivity_tools/",
      "url": "https://dushkin.tech/posts/my_productivity_tools/",
      "title": "My productivity tools",
      "content_html": "<p>I like to make my everyday work and life-related tasks faster: taking notes, remembering passwords, arranging windows and maintain things to do.</p>\n<p>I want to share software and a bit of hardware gems I found during 20+ years of sharpening the &quot;Second brain&quot; blade. For me, it's also an opportunity to reflect.</p>\n<blockquote>\n<p>Most of the time, I use Apple devices and very little — Windows, so keep this in mind, and I'll try to highlight if there is a Windows version of the software.</p>\n</blockquote>\n<h2 id=\"tldr\">TLDR <a class=\"direct-link\" href=\"#tldr\">#</a></h2>\n<ul>\n<li>Remember things in short-term:\n<ul>\n<li>Apple Reminder</li>\n<li>Apple Notes</li>\n<li>Google Calendar</li>\n</ul>\n</li>\n<li>Personal Knowledge Management (long-term memory):\n<ul>\n<li>Notion</li>\n<li>Obsidian</li>\n<li>LucidChart</li>\n<li>Yandex.Disk</li>\n</ul>\n</li>\n<li>System control:\n<ul>\n<li>Raycast</li>\n<li>Lunar</li>\n<li>ITerm 2</li>\n</ul>\n</li>\n<li>Other\n<ul>\n<li>Keyboards: NuPhy Air 60 and Dygma Raise</li>\n<li>Timeout</li>\n<li>Grammarly</li>\n<li>MacPass</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"remember-things-in-short-term\">Remember things in short-term <a class=\"direct-link\" href=\"#remember-things-in-short-term\">#</a></h2>\n<p>There are myriads of everyday things which I should remember for a long: scheduled appointments, reminders to pay bills, watch a movie, order something, etc. To free up a bit of memory I use these tools.</p>\n<p><strong>Apple Reminder</strong></p>\n<ul>\n<li>Using reminders as is. I often use Siri to create a reminder like &quot;Hey Siri, remind me in 5 hours to scan a document&quot;. A cool benefit of the highly-coupled Apple eco-system.</li>\n<li>Also using it to keep lists of:\n<ul>\n<li>Books to read</li>\n<li>Movies to watch</li>\n<li>Games to play</li>\n</ul>\n</li>\n<li>Platforms: macOS, iPadOS, iOS.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/reminder.png\" alt=\"...\"></p>\n<p><strong>Apple Notes</strong></p>\n<ul>\n<li>Mostly using it for Quick Notes (TM). Again thanks to good integration with iOS and macOS, it's quite a convenient way to quickly write down a thought or save a link with comments. For instance, when exploring Unreal Engine 5, I often clicked on &quot;Share&quot; in the iOS YouTube app, shared the video via Notes, and added a small comment on what this video was about.</li>\n<li>Sometimes, use it to draw some diagrams. Good enough for a rough sketch but hardly for sharing the result with someone else. Or I suck at drawing :)</li>\n<li>I tried to use it as a main note-taking app, but it lacks many must-have features. Number one is interlinking between notes. On the good side, Apple started investing in it and recently, Apple added must-have things like tags or tables.</li>\n<li>Platforms: macOS, iPadOS, iOS.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/notes.png\" alt=\"...\"></p>\n<p><strong><a href=\"https://bear.app\">Bear</a></strong></p>\n<ul>\n<li>Honorable mention. I'm not using it anymore because Apple Notes has become good enough for the same tasks. But still, it has one of the nicest UI and UX (user experience) I ever saw both desktop and mobile. It's still worth trying if Apple Notes already cover your needs, but you're looking for a bit more features like:</li>\n<li>Natural markdown format for notes,</li>\n<li>Notes interlinking (more on that later, but that's potentially a huge one!),</li>\n<li>Themes!</li>\n<li>Platforms: macOS, iPadOS, iOS.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/bear.png\" alt=\"...\"></p>\n<p><strong>Google Calendar added to Apple Calendar</strong></p>\n<ul>\n<li>Besides covering obvious needs like adding doctor appointments, birthdays, etc. I made a shared calendar with my relatives and added events like joint trips.</li>\n<li>Tried to use it as a weekly schedule (set exact wake-up time, breakfast, work, gym, etc.), but it never lifted off. Maybe it's just a little too much &quot;productivity&quot; for me :), but if YouTube &quot;productivity&quot; experts are not lying to make more content, this kind of &quot;full-scheduled life&quot; works for some people.</li>\n<li>Platforms: macOS, iPadOS, iOS, but Google Calendar itself can be integrated almost to every mail/calendar app.</li>\n</ul>\n<h2 id=\"personal-knowledge-management\">Personal Knowledge Management <a class=\"direct-link\" href=\"#personal-knowledge-management\">#</a></h2>\n<p>Although Apple Notes and Reminders are also used for preserving some knowledge, they do not offer any suitable (for me) experience for:</p>\n<ul>\n<li>Keeping long-lasting information,</li>\n<li>Research and learning,</li>\n<li>Writing long formats like articles or posts,</li>\n<li>Exploring and finding connections between existing information,</li>\n<li>Sharing information.</li>\n</ul>\n<p>And that's fine. Apple's apps are good at quick information capture (in terms of performance and smooth UX for common tasks), but not for things I mentioned above. I guess it's almost impossible to have everything in a single app. 🤷‍♂️</p>\n<p><strong><a href=\"https://www.notion.so\">Notion</a></strong></p>\n<ul>\n<li>It's my primary app for capturing personal life-related info, i.e. tips for passing IELTS, physical exercises, medical information, learning materials, etc.</li>\n<li>It has quite a simple way to share notes, which I'm using for sharing information with relatives.</li>\n<li>It has a cool UI around managing its databases and presents it in several ways (tables, kanban, etc.).\n<ul>\n<li>For instance was using it for gathering structured info about routers or notebooks before buying ones. Price, performance, average temperature, etc., are all important factors affecting buying decisions.</li>\n<li>But truth be told, it could be more useful as advertised. At least I didn't find any other good scenarios for personal use. I tried keeping it in the database todo-list, but managing it took more time than giving a profit.</li>\n</ul>\n</li>\n<li>Pricing model is quite affordable. Free-tier also works (recently, they expanded it so you can have an unlimited number of notes).</li>\n<li>Platforms: all.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/notion.png\" alt=\"notion\"></p>\n<p><strong>Obsidian</strong></p>\n<ul>\n<li>It's a new tool in my belt. They recently released a 1.0.0. It has MacOS, iOS (both iPhone and iPad versions) and Windows versions.</li>\n<li>I'm exploring ways of using it for research work and writing articles based on research. I guess it's just my habit from science days when I was gathering a lot of sources before doing anything and verifying that my work makes sense :)</li>\n<li>There are several features which make Obisidian a much more suitable tool for research and long-format writing compared to Notion:\n<ul>\n<li>The major one is graph-like knowledge structuring support. Yes, you can put your notes in folders like Notion or Apple Notes, but that's not the main one.\n<ul>\n<li>Evangelists of graph-based solutions (sometimes called &quot;Zattelcasten&quot;) say that the natural way of thinking for our brain is a network of connections between pieces of information, not a hierarchical structure which Notion or Notes offer.</li>\n<li>Practically speaking, this feature is more about habit than technology. You can quickly add links to other notes and see information about back-links (notes which refer to current note). And that's it! So you can think of it as a swift and responsive personal Wikipedia.</li>\n<li>The habit is creating links to essential entities in the text while you are typing or reading. That's easy when you get used to it. You need to type `` and start typing the term you're going to mention and see if there is an already existing note. If not, that's not a problem; leave it as a link. Obsidian will create an empty note for you, so next time will see at least that some pages refer to the corresponding note.</li>\n<li>People also say that graph-representation of notes also helps to indent if hidden relationships between data which can be valuable.</li>\n<li>Anyway. I have tried the tool briefly to say how it all works in practice. Will see. I like the concept so far.</li>\n</ul>\n</li>\n<li>The next one is that it's entirely local! So I can not worry about your data integrity to some degree. Also, it does search and linking very fast. And you get a natural offline mode (<em>cough-Notion-cough</em>) :)</li>\n<li>It's based on a markdown format, making migration or co-using notes in other apps (like Logseq) easy.</li>\n<li>There are several helpful community plugins like better UX for creating tables, managing tasks, making UX more like an outline app, etc.</li>\n<li>Themes, lots of them! Notion and Apple Notes lack this feature.</li>\n<li>Obisidian give the option to create <strong>a daily note</strong> and open it at the beginning of each day. At first, I didn't get the value of it, but now I realize that this default clean place for notes offers a smooth opportunity for any work/research-related notes. No need to spend brain energy to select a proper place for a new note. Just start typing a fresh idea, and later maybe you'll move it to the right place. People have a limited number of good choices made per day, and this feature allows them to save one every day.</li>\n<li>Notes can have custom properties, and some plugins allow to query these properties and generate nice tables, kanban tables, etc. Again I didn't find this helpful feature in Notion. Still, I like the idea of how it is naturally integrated into notes compared to Notion, where database entry is a different sort of data not related to the rest of the notes.</li>\n<li>A cherry on top is a unique way of organizing multiple opened notes in the app — stacked view. It feels like real pieces of paper stacked on each other, and you slide them left and right to switch to the most useful now. Fantastic concept and I hope it will find more adoption in the future in other apps like Visual Studio Code or Web Browsers.</li>\n</ul>\n</li>\n<li>The only issue is a pricing model.\n<ul>\n<li>8$ per month (96$ per year) is a bit too much for built-in cloud syncing, which is useful if you use the app on multiple devices. I'm using iCloud to store notes, which works great across Apple devices, but iCloud is not working in Windows.</li>\n<li>Also, another 50$ per year for a commercial license with no additional features compared to a personal (free) license is a bit of a shame.</li>\n<li>I really liked the tool so decided to spend next year with Obsidian and instead buying a new Call Of Duty I decided to spend this money to Obsidian Cloud Sync 😁</li>\n</ul>\n</li>\n<li>Platforms: all.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/obisidian.png\" alt=\"\"></p>\n<p><strong>Lucidchart</strong></p>\n<ul>\n<li>I used this app only for work since my employer provides a license for it. It's one of the best of its kind.</li>\n<li>The power of diagrams in work life is a topic for another post. As a software engineer, I've been making diagrams since university, and it's an amazing process helping creativity, problem-solving and documenting.</li>\n<li>Previously, I used open-sourced <strong><a href=\"http://Draw.io\">Draw.io</a></strong>, which is also great, but due to its open-source nature, it could be more advanced and polished and has a sharing capability.</li>\n<li>Platforms: all.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/lucidchart.png\" alt=\"...\"></p>\n<p><strong>Cloud Storage</strong></p>\n<ul>\n<li>One of the oldest categories of apps I use. Currently, I use <a href=\"https://disk.yandex.com\">Yandex.Disk</a> because of stable MacOS app work and reliable back-end. I worked for Yandex for seven years and knew the people behind the product. I can trust them :)</li>\n<li>Platforms: all.</li>\n</ul>\n<h2 id=\"system-control\">System control <a class=\"direct-link\" href=\"#system-control\">#</a></h2>\n<p><strong>Raycast</strong></p>\n<ul>\n<li>A recent gem I found. It's an extensible MacOS Spotlight (the one you see on &quot;Cmd + Space&quot;).</li>\n<li>It's quite the same as more mature <a href=\"https://www.alfredapp.com/\">Alfred</a>, but we with much more in free-pack and a more modern (IMHO) look.</li>\n<li>Previously, I used two different apps for the same functions: Spectacle (prev. Rectangle) for windows management and Clipy for clipboard history.</li>\n<li>I use it for:\n<ul>\n<li><strong>Clipboard history</strong>. That's the most frequent feature I use. I also stored images in history with previews and allowed them to paste without formatting.</li>\n<li>Windows Management: move a window to the left-right half, move windows to another display, etc. Second the most frequent feature.</li>\n<li>Opening floating (over everything) notes during the meeting to keep track of the agenda</li>\n<li>Quick calculations.</li>\n</ul>\n</li>\n<li>Platforms: macOS.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/raycast.png\" alt=\"...\"></p>\n<p><strong><a href=\"https://lunar.fyi\">Lunar</a></strong></p>\n<ul>\n<li>Allows controlling brightness both on built-in and external monitors.</li>\n<li>Previously, I used 2 or 3 similar apps, some of them are open-source, but no app managed to work correctly with all the external monitors I use.</li>\n<li>Platforms: macOS.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/lunar.png\" alt=\"...\"></p>\n<p><strong>ITerm 2</strong></p>\n<ul>\n<li>Replacement for MacOS built-in terminal.</li>\n<li>Has tons of features and integrations.</li>\n<li>My current work only assumes a little work in a terminal, but I remember what a great difference it made when I started to use one at my previous job.</li>\n<li>Platforms: macOS.</li>\n</ul>\n<h2 id=\"other\">Other <a class=\"direct-link\" href=\"#other\">#</a></h2>\n<p><strong>Good keyboard and typing skills</strong></p>\n<ul>\n<li>Typing speed is not a help in programming, but the more senior engineer, the more time he can spend on communication, writing a post in a corporate network, documentation, etc.</li>\n<li>To make these tasks faster and more pleasant, I invested some time in typing speed skills and a keyboard with a comfortable typing experience.</li>\n<li>Keyboard\n<ul>\n<li>Home: <strong>NuPhy Air 60</strong>. It's 60% (no Numpad and Fn row), mechanical, low-profile And wireless keyboard. I love its compact size and folio, allowing me to put my iPad mini on a stand. I read and write many things on iPad (including this post), and this keyboard is way better than Apple's offerings for the same tasks in terms of balance between portability and typing experience. I use linear lubed switches with some mods.\n<ul>\n<li><img src=\"/img/for_posts/01/nuphy.png\" alt=\"...\"></li>\n</ul>\n</li>\n<li>Work: <strong>Dygma Raise</strong>. It's a 60% split ergonomic mechanical keyboard with optional tenting capability for a more ergonomic wrist position. I love it for the comfort of typing. One small con is that the sound of typing could be better due to its construction. I use linear lubed switches + some keyboard mods.\n<ul>\n<li><img src=\"/img/for_posts/01/dygma.png\" alt=\"...\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong><a href=\"https://apps.apple.com/us/app/time-out-break-reminders/id402592703?mt=12\">Timeout</a></strong> app from macOS App Store</p>\n<ul>\n<li>Small nice app that reminds me to take a break. I have used it for at least six years.</li>\n<li>Platforms: macOS.</li>\n</ul>\n<p><strong><a href=\"https://app.grammarly.com\">Grammarly</a></strong></p>\n<ul>\n<li>It's a nice service checking grammar, spelling, punctuation and most importantly word selection and sentence structure.</li>\n<li>Platforms: all.</li>\n</ul>\n<p><strong><a href=\"https://macpassapp.org\">MacPass</a></strong></p>\n<ul>\n<li>I use it to <strong>store credentials</strong> to services. I love it for open-source and using local files as a database.</li>\n<li>Database files are encrypted and stored in personal cloud storage.</li>\n<li>There are a lot of more popular alternatives, but almost all of them are online services and engaging browser extension installation. Credentials are one of the most important pieces of a secure online presence, and I cannot afford to store them in 3rd party services, which can (theoretically) vanish the next day and take all my credentials with them.</li>\n<li>Alternatives using the same database format are available on all platforms.</li>\n</ul>\n<p><img src=\"/img/for_posts/01/macpass.png\" alt=\"...\"></p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>I was developing this set of apps and techniques for a long time, and the journey continues. It seems like a lot, but in reality, almost every app has some predecessors (which I also used) and extends previous experience, so it's pretty easy to learn a new app.<br>\nI know the &quot;productivity&quot; apps field is indefinite, and I'm happy to see you sharing your favourite apps and workflows.</p>\n",
      "date_published": "2022-10-30T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/HP_U28_for_work_and_gaming_review/",
      "url": "https://dushkin.tech/posts/HP_U28_for_work_and_gaming_review/",
      "title": "HP U28 for work and gaming review",
      "content_html": "<p>So after trying some monitors I decided to buy HP U28. I had some surprises after, but overall it is a good monitor for its price (500 pounds in July 2021).<br>\nMy must have features for monitor are:</p>\n<ul>\n<li><strong>4K for text clarity</strong>. I read a lot of texts and write a lot of code, so it is crucial for me the see text perfectly. Also only 4K monitors are recognised by MacOS as &quot;retina&quot; and you can scale MacOS UI without any blurring.</li>\n<li><strong>USB-C with power delivery</strong> at least 65W and built-in USB hub. It allows to use a single cable for charging, video output, connecting keyboard and mouse.</li>\n<li><strong>HDR</strong>. This technology introduces luminance along with pixel colour. Also monitor should support wider colour range like DCI-P3. It is not crucial, but a nice addition for a low extra price for entry level HDR.</li>\n</ul>\n<p>I have 3 devices to plug into this monitor: my work MacBook 16, gaming laptop and PS5.</p>\n<h2 id=\"for-work\">For work <a class=\"direct-link\" href=\"#for-work\">#</a></h2>\n<p><strong>For working on MacBook, it is perfect</strong>. I give here 5 stars. It provides good text clarity, but not the best possible, probably because 28&quot; is a little too big for 4K. I had previously old Dell 27&quot; 4K, and it was perfect. Also, HP u28 gives HDR out of the box and 10-bit colours on each channel. It has just entry level HDR 400, which means maximum brightness limited with 400 nits. For comparison iPhone 12 has maximum brightness 1200 nits.</p>\n<h2 id=\"for-gaming-on-pc\">For gaming on PC <a class=\"direct-link\" href=\"#for-gaming-on-pc\">#</a></h2>\n<p><strong>For gaming on PC, I give it 3.5 stars</strong>. I have a laptop with GeForce 2070, and it has DisplayPort 1.4 over USB-C (Thunderbolt) and HDMI 2.0. It turned out (well, it was in specs, actually) monitor have only DisplayPort 1.2 (!), which do not support HDR officially. I had a lot of trouble getting it right.</p>\n<p>There are two options for me in this setup. <strong>First is to use USB-C to USB-C connection</strong>, which allows leave keyboard and mouse plugged into monitor, but there are many troubles with HDR. For some reason, HDR can be turned on in Windows 10. I do not know why because there is no such thing in DP 1.2 specs. But anyway, when I am turning on HDR, setting 10-bit RGB, everything seems fine until I'll start some game, and it immediately resets to 6-bit (!) with awful colour banding. Colour banding is when you see clear colour steps in gradients, like back in 1995. I can switch from RBG (native) to YCbCr 4:4:4 (it is a colour compression method), but I get limited colour, and I see colour banding as well, but not so bad as if it was on 6 bit. So after killing a lot of time on it, I decided to turn off HDR in Windows and enjoy 8 bit RGB with a Photo colour profile. Sometimes I select YCbCr 4:4:4 10 bit + HDR because it is a bit better in darker games, but as I said this options gives noticeable color banding.</p>\n<p><img src=\"/img/for_posts/02/color_banding.jpeg\" alt=\"Color banding\"><br>\n<em>Color banding on the left</em></p>\n<p><strong>Another option for gaming PC</strong> is to hook up HDMI. It works well on HDR 8-bit RGB, but I have to manually reconnect the mouse and keyboard from monitor to laptop. I hate wires on a desk and all this manual switching, so it is not for me. Maybe I'll make up something for this later.</p>\n<p>By the way, there is <strong>no official G-SYNC support (only AMD FreeSync)</strong>. Although Nvidia Control Panel allows to turn on G-SYNC, it just not working. I see awful screen tearing in games, so I turned on VSYNC in games (it's like a software solution to screen tearing problem, but not so efficient). There is such an option for DisplayPort connection, but HDMI lucks it.</p>\n<h2 id=\"for-gaming-on-ps5\">For gaming on PS5 <a class=\"direct-link\" href=\"#for-gaming-on-ps5\">#</a></h2>\n<p>And the last one is PS5, and the monitor gets 5 stars here. HDR looks amazing, true 4K. I cannot complain here. Also, I bought a 5wt soundbar (costs around 20 quids) and connected it to the monitor. This setup gives decent sound for PS 5 games.</p>\n<h2 id=\"dimming-zones\">Dimming zones <a class=\"direct-link\" href=\"#dimming-zones\">#</a></h2>\n<p>I've noticed there are actually dimming zones, but they are quite simple and consists of top and bottom array lightning. Here is the video:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nVxh1Hwyiks\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>I guess this is just the best option for its price for me. Better solutions in terms of PC gaming starts from 800 quids (if you need 4K), that is not I'm ready to spend now. I'll wait until OLED or mini-LED monitors will become affordable for better HDR and HDMI 2.1 for better PS5 experience.</p>\n",
      "date_published": "2022-10-10T00:00:00Z"
    },{
      "id": "https://dushkin.tech/posts/js_assign_variable_in_switch/",
      "url": "https://dushkin.tech/posts/js_assign_variable_in_switch/",
      "title": "How to assign a variable to switch statement result",
      "content_html": "<p>It’s a helpful trick that allows writing compact yet highly type-proof code to deal with enums both in TypeScript and Flow.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Step<span class=\"token punctuation\">.</span>One<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">one</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Step<span class=\"token punctuation\">.</span>Two<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">two</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Step<span class=\"token punctuation\">.</span>Three<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">three</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>I use in React <code>render</code> as well.</p>\n",
      "date_published": "2022-09-01T00:00:00Z"
    }
  ]
}
